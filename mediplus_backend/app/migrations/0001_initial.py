# Generated by Django 3.2.4 on 2021-08-15 11:45

import app.models
import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stars', models.IntegerField(db_index=True, default=3)),
                ('name', models.CharField(db_index=True, max_length=128)),
                ('logo', models.URLField(blank=True, max_length=10024, null=True)),
                ('description', models.TextField(blank=True, max_length=516, null=True)),
            ],
            options={
                'verbose_name': 'Brand',
                'verbose_name_plural': 'Brands',
                'ordering': ['-stars', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=128)),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('status', models.CharField(default='active', max_length=64)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_carts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'order_with_respect_to': 'user',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stars', models.IntegerField(db_index=True, default=3)),
                ('name', models.CharField(db_index=True, max_length=128)),
                ('description', models.TextField(max_length=516)),
                ('image', app.models.ImageField(blank=True, null=True, upload_to='categories')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['stars'],
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=128)),
                ('email', models.EmailField(max_length=256, unique=True)),
                ('sales_email', models.EmailField(max_length=256)),
                ('phone', models.CharField(max_length=16)),
                ('telephone', models.CharField(max_length=16)),
                ('whatsapp_phone', models.CharField(max_length=16)),
                ('logo', app.models.ImageField(blank=True, null=True, upload_to='company/logos')),
                ('profile_book', app.models.FileField(blank=True, null=True, upload_to='company/books')),
                ('address', models.TextField(max_length=516)),
                ('geo_position', models.TextField(blank=True, max_length='12000', null=True)),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stars', models.IntegerField(db_index=True, default=3)),
                ('name', models.CharField(db_index=True, max_length=128)),
                ('code', models.CharField(blank=True, max_length=64, null=True)),
                ('price', models.FloatField(default=0.0)),
                ('description', models.TextField(blank=True, max_length=516, null=True)),
                ('image', app.models.ImageField(blank=True, null=True, upload_to='products')),
                ('discount', models.FloatField(default=0)),
                ('date', models.DateField(auto_now_add=True)),
                ('for_sale', models.BooleanField(default=True)),
                ('is_parent_only', models.BooleanField(default=False)),
                ('requires_prescription', models.BooleanField(default=False)),
                ('quantity', models.PositiveIntegerField(default=0)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='brand_products', to='app.brand')),
                ('category', models.ManyToManyField(blank=True, related_name='category_products', to='app.Category')),
                ('parent', models.ManyToManyField(blank=True, related_name='_app_product_parent_+', to='app.Product')),
                ('sibling', models.ManyToManyField(blank=True, related_name='_app_product_sibling_+', to='app.Product')),
            ],
            options={
                'ordering': ['-stars', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PrescribePermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('granted_on', models.DateTimeField(auto_now_add=True)),
                ('expires_on', models.DateTimeField(default=datetime.datetime(9999, 12, 31, 23, 59, 59, 999999))),
                ('quantity', models.IntegerField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_prescribe_permissions', to='app.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_prescribe_permissions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('description', models.TextField(blank=True, max_length=256, null=True)),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='app.cart')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cart_item_products', to='app.product')),
            ],
        ),
        migrations.CreateModel(
            name='Watch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.IntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Created on')),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_watches', to='app.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_watch_list', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Watch',
                'verbose_name_plural': 'Watches',
                'order_with_respect_to': 'user',
                'unique_together': {('user', 'product')},
            },
        ),
    ]
